USE WAREHOUSE CHINOOK_WH;
USE DATABASE CHINOOK_DB;

CREATE OR REPLACE TABLE STAGE.Artist (
    "ArtistId" INTEGER,
    "Name" STRING(120),
    "Created_By" STRING(100) DEFAULT 'ADF_PIPELINE',
    "Created_Dt" DATE DEFAULT CURRENT_DATE()
);

CREATE OR REPLACE TABLE STAGE.Genre (
    "GenreId" INTEGER,
    "Name" STRING(120),
    "Created_By" STRING(100) DEFAULT 'ADF_PIPELINE',
    "Created_Dt" DATE DEFAULT CURRENT_DATE()
);

CREATE OR REPLACE TABLE STAGE.Album (
    "AlbumId" INTEGER,
    "Title" VARCHAR(160),
    "ArtistId" INTEGER,
    "Created_By" VARCHAR(100) DEFAULT 'ADF_PIPELINE',
    "Created_Dt" DATE DEFAULT CURRENT_DATE()
);

CREATE OR REPLACE TABLE STAGE.Customer (
    "CustomerId" INTEGER,
    "FirstName" STRING(40),
    "LastName" STRING(20),
    "Company" STRING(80),
    "Address" STRING(70),
    "City" STRING(40),
    "State" STRING(40),
    "Country" STRING(40),
    "PostalCode" STRING(10),
    "Phone" STRING(24),
    "Fax" STRING(24),
    "Email" STRING(60),
    "SupportRepId" INTEGER,
    "Created_By" STRING(100) DEFAULT 'ADF_PIPELINE',
    "Created_Dt" DATE DEFAULT CURRENT_DATE()
);

CREATE OR REPLACE TABLE STAGE.Invoice (
    "InvoiceId" INTEGER,
    "CustomerId" INTEGER,
    "InvoiceDate" DATETIME,
    "BillingAddress" STRING(70),
    "BillingCity" STRING(40),
    "BillingState" STRING(40),
    "BillingCountry" STRING(40),
    "BillingPostalCode" STRING(10),
    "Total" NUMBER(10, 2),
    "Created_By" STRING(100) DEFAULT 'ADF_PIPELINE',
    "Created_Dt" DATE DEFAULT CURRENT_DATE()
);

CREATE OR REPLACE TABLE STAGE.InvoiceLine (
    "InvoiceLineId" INTEGER,
    "InvoiceId" INTEGER,
    "TrackId" INTEGER,
    "UnitPrice" NUMBER(10, 2),
    "Quantity" INTEGER,
    "Created_By" STRING(100) DEFAULT 'ADF_PIPELINE',
    "Created_Dt" DATE DEFAULT CURRENT_DATE()
);

CREATE OR REPLACE TABLE DW.DATE_DIM (
    DATE_KEY NUMBER(10) PRIMARY KEY,
    FULL_DATE DATE,
    DAY_NUM NUMBER(3),
    WEEKDAY_ABBR VARCHAR(3),
    WEEKDAY_NUM NUMBER(1),
    DAY_OF_YEAR_NUM NUMBER(3),
    WEEK_OF_YEAR NUMBER(2),
    MONTH_NUM NUMBER(2),
    MONTH_ABBR VARCHAR(3),
    QUARTER_NUM NUMBER(1),
    QUARTER_NAME VARCHAR(3),
    YEAR_NUM NUMBER(4),
    FIRST_DAY_OF_MONTH DATE,
    LAST_DAY_OF_MONTH DATE,
    IS_WEEKEND VARCHAR(1)
);

CREATE OR REPLACE TABLE DW.TIME_DIM (
    TIME_KEY NUMBER(4) PRIMARY KEY,
    HOUR_NUM INTEGER,
    MINUTE_NUM INTEGER,
    TIME_24_HR STRING
);

INSERT INTO DW.DATE_DIM
WITH DATES AS (
    SELECT 
        DATEADD(DAY, SEQ4(), DATE '2000-01-01') AS DATE_KEY
    FROM TABLE(GENERATOR(ROWCOUNT => 365*30))
)
SELECT 
    TO_CHAR(DATE_KEY, 'YYYYMMDD') DATE_KEY,
    DATE_KEY FULL_DATE,
    DAY(DATE_KEY) DAY_NUM,
    TO_CHAR(DATE_KEY, 'DY') WEEKDAY_ABBR,
    DAYOFWEEK(DATE_KEY) WEEKDAY_NUM,
    DAYOFYEAR(DATE_KEY) DAY_OF_YEAR_NUM,
    WEEK(DATE_KEY) WEEK_OF_YEAR,
    MONTH(DATE_KEY) MONTH_NUM,
    TO_CHAR(DATE_KEY, 'Mon') MONTH_ABBR,
    QUARTER(DATE_KEY) QUARTER_NUM,
    CASE QUARTER(DATE_KEY)
        WHEN 1 THEN 'Q1'
        WHEN 2 THEN 'Q2'
        WHEN 3 THEN 'Q3'
        WHEN 4 THEN 'Q4'
    END QUARTER_NAME,
    YEAR(DATE_KEY) YEAR_NUM,
    DATE_TRUNC('MONTH', DATE_KEY) FIRST_DAY_OF_MONTH,
    LAST_DAY(DATE_KEY) LAST_DAY_OF_MONTH,
    CASE WHEN DAYOFWEEK(DATE_KEY) IN (0, 6) 
        THEN 'Y' 
        ELSE 'N' 
    END IS_WEEKEND
FROM DATES;

INSERT INTO DW.TIME_DIM
WITH H AS (
    SELECT SEQ4() AS Hr FROM TABLE(GENERATOR(ROWCOUNT => 24))
),
M AS (
    SELECT SEQ4() AS Mi FROM TABLE(GENERATOR(ROWCOUNT => 60))
)
SELECT
    LPAD(H.Hr, 2, '0') || LPAD(M.Mi, 2, '0') AS TIME_KEY,
    H.Hr,
    M.Mi,
    LPAD(H.Hr, 2, '0') || ':' || LPAD(M.Mi, 2, '0') AS TIME_24_HR
FROM H, M;

CREATE OR REPLACE TABLE DW.CUSTOMER_DIM(
    CUSTOMER_KEY NUMBER(10) PRIMARY KEY,
    CUSTOMER_ID NUMBER(10),
    FIRST_NAME VARCHAR(100),
    LAST_NAME VARCHAR(100),
    COMPANY_NAME VARCHAR(100),
    CITY VARCHAR(100),
    STATE VARCHAR(50),
    COUNTRY VARCHAR(50),
    ZIP_CODE VARCHAR(10),
    EMPLOYEE_ID NUMBER(10),
    IS_ACTIVE VARCHAR(1) DEFAULT 'Y',
    HASH_VALUE VARCHAR(128),  -- Added for change detection
    SOURCE_ID VARCHAR(50),
    DATE_TO_WAREHOUSE DATETIME DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE DW.ARTIST_DIM(
    ARTIST_KEY NUMBER(10) PRIMARY KEY,
    ARTIST_ID NUMBER(10),
    ARTIST_NAME VARCHAR(150),
    SOURCE_ID VARCHAR(50),
    DATE_TO_WAREHOUSE DATETIME DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE DW.ALBUM_DIM(
    ALBUM_KEY NUMBER(10) PRIMARY KEY,
    ALBUM_ID NUMBER(10),
    TITLE VARCHAR(160),
    ARTIST_ID NUMBER(10),
    SOURCE_ID VARCHAR(50),
    DATE_TO_WAREHOUSE DATETIME DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE DW.GENRE_DIM (
    GENRE_KEY NUMBER(10) PRIMARY KEY,
    GENRE_ID NUMBER(10),
    "NAME" STRING(120),
    SOURCE_ID VARCHAR(50),
    DATE_TO_WAREHOUSE DATETIME DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE DW.INVOICE_DIM(
    INVOICE_KEY NUMBER(10) PRIMARY KEY,
    INVOICE_ID NUMBER(10),
    CUSTOMER_ID NUMBER(10),
    SALE_DATE DATE,
    BILLING_ADDRESS STRING(70),
    BILLING_CITY STRING(40),
    BILLING_STATE STRING(40),
    BILLING_COUNTRY STRING(40),
    BILLING_POSTAL_CODE STRING(10),
    TOTAL NUMBER(10, 2),
    SOURCE_ID VARCHAR(50),
    DATE_TO_WAREHOUSE DATETIME DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE DW.INVOICELINE_DIM (
    INVOICELINE_KEY NUMBER(10) PRIMARY KEY,
    INVOICELINE_ID NUMBER(10),
    INVOICE_ID NUMBER(10),
    TRACK_ID INTEGER,
    UNIT_PRICE NUMBER(10, 2),
    QUANTITY INTEGER,
    SOURCE_ID VARCHAR(50),
    DATE_TO_WAREHOUSE DATETIME DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE SEQUENCE CUSTOMER_DIM_SEQ START = 1 INCREMENT = 1;
CREATE OR REPLACE SEQUENCE ARTIST_DIM_SEQ START = 1 INCREMENT = 1;
CREATE OR REPLACE SEQUENCE ALBUM_DIM_SEQ START = 1 INCREMENT = 1;
CREATE OR REPLACE SEQUENCE GENRE_DIM_SEQ START = 1 INCREMENT = 1;
CREATE OR REPLACE SEQUENCE INVOICE_DIM_SEQ START = 1 INCREMENT = 1;
CREATE OR REPLACE SEQUENCE INVOICELINE_DIM_SEQ START = 1 INCREMENT = 1;

CREATE TABLE DW.SALES_FACT(
    SALES_KEY NUMBER(10) PRIMARY KEY,
    CUSTOMER_KEY NUMBER(10),
    INVOICE_ID NUMBER(10),
    DATE_DIM_KEY NUMBER(10),  -- References DATE_DIM instead of storing date directly
    TIME_DIM_KEY NUMBER(4),   -- Optional: Reference to TIME_DIM
    TOTAL_SALE_AMT NUMBER(10,2),
    SOURCE_ID VARCHAR(50),
    DATE_TO_WAREHOUSE DATETIME DEFAULT CURRENT_TIMESTAMP(),
    -- Foreign key constraints
    CONSTRAINT FK_SALES_DATE FOREIGN KEY (DATE_DIM_KEY) REFERENCES DW.DATE_DIM(DATE_KEY),
    CONSTRAINT FK_SALES_TIME FOREIGN KEY (TIME_DIM_KEY) REFERENCES DW.TIME_DIM(TIME_KEY),
    CONSTRAINT FK_SALES_CUSTOMER FOREIGN KEY (CUSTOMER_KEY) REFERENCES DW.CUSTOMER_DIM(CUSTOMER_KEY)
);

CREATE OR REPLACE SEQUENCE SALES_FACT_SEQ START = 1 INCREMENT = 1;

