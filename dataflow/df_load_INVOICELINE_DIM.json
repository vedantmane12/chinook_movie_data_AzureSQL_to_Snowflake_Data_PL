{
	"name": "df_load_INVOICELINE_DIM",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "chinook_ds_snowflake",
						"type": "DatasetReference"
					},
					"name": "InvoiceLineDIM"
				},
				{
					"dataset": {
						"referenceName": "chinook_ds_snowflake",
						"type": "DatasetReference"
					},
					"name": "sourceInvoiceLineDIM"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "chinook_ds_snowflake",
						"type": "DatasetReference"
					},
					"name": "sinkInvoiceLimeDIM"
				}
			],
			"transformations": [
				{
					"name": "joinSourceTgt"
				},
				{
					"name": "InvoiceLineKey"
				},
				{
					"name": "RowChanges"
				}
			],
			"scriptLines": [
				"source(output(",
				"          InvoiceLineId as decimal(38,0),",
				"          InvoiceId as decimal(38,0),",
				"          TrackId as decimal(38,0),",
				"          UnitPrice as decimal(10,2),",
				"          Quantity as decimal(38,0),",
				"          Created_By as string,",
				"          Created_Dt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> InvoiceLineDIM",
				"source(output(",
				"          INVOICELINE_KEY as decimal(10,0),",
				"          INVOICELINE_ID as decimal(10,0),",
				"          INVOICE_ID as decimal(10,0),",
				"          TRACK_ID as decimal(38,0),",
				"          UNIT_PRICE as decimal(10,2),",
				"          QUANTITY as decimal(38,0),",
				"          SOURCE_ID as string,",
				"          DATE_TO_WAREHOUSE as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceInvoiceLineDIM",
				"InvoiceLineDIM, sourceInvoiceLineDIM join(InvoiceLineId == INVOICELINE_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSourceTgt",
				"joinSourceTgt keyGenerate(output(InvoiceLine_Key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> InvoiceLineKey",
				"InvoiceLineKey alterRow(updateIf(InvoiceLineId==INVOICELINE_ID&&InvoiceId==INVOICE_ID&&TrackId==TRACK_ID&&(UnitPrice!=UNIT_PRICE||InvoiceLineDIM@Quantity!=sourceInvoiceLineDIM@QUANTITY)),",
				"     insertIf(iifNull(INVOICELINE_ID,0,INVOICELINE_ID)==0)) ~> RowChanges",
				"RowChanges sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['INVOICELINE_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INVOICELINE_KEY = InvoiceLineKey@InvoiceLine_Key,",
				"          INVOICELINE_ID = InvoiceLineId,",
				"          INVOICE_ID = InvoiceId,",
				"          TRACK_ID = TrackId,",
				"          UNIT_PRICE = UnitPrice,",
				"          QUANTITY = InvoiceLineDIM@Quantity,",
				"          SOURCE_ID = Created_By,",
				"          DATE_TO_WAREHOUSE = Created_Dt",
				"     )) ~> sinkInvoiceLimeDIM"
			]
		}
	}
}